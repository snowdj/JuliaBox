include("setup.jl")


function createModel()
    m = Model()
 @variable(m, -0.5<= x1 <=0.5, start=-0.328252868 )
 @variable(m, 5.4<= x2 <=6.4, start=6.243266708  )
 @variable(m, 0.4<= x3 <=1.4, start=0.950375356  )
 @variable(m, 4.9<= x4 <=5.9, start=5.201137904  )
 @variable(m, 1.3<= x5 <=2.3, start=1.592212117  )
 @variable(m, 3.9<= x6 <=4.9, start=4.124052867  )
 @variable(m, 2.1<= x7 <=3.1, start=2.449830504  )
 @variable(m, 4.1<= x8 <=5.1, start=4.956270347  )
 @variable(m, 2.8<= x9 <=3.8, start=2.867113723  )
 @variable(m, 3<= x10 <=4, start=3.500210669  )
 @variable(m, 3.9<= x11 <=4.9, start=4.898117627  )
 @variable(m, 3.2<= x12 <=4.2, start=3.778733378  )
 @variable(m, 4.7<= x13 <=5.7, start=5.691133039   )
 @variable(m, 2.3<= x14 <=3.3, start=3.062250467   )
 @variable(m, 5.6<= x15 <=6.6, start=5.730692483   )
 @variable(m, 2.3<= x16 <=3.3, start=2.939718759  )
 @variable(m, 6<= x17 <=7, start=6.159517864  )
 @variable(m, 1.9<= x18 <=2.9, start=2.150080533  )
 @variable(m, 6.9<= x19 <=7.9, start=7.568928609  )
 @variable(m, 1<= x20 <=2, start=1.435356381  )
 @variable(m, 0<= x21 <=10, start=3.59700266  )
 @variable(m, -2<= x22 <=2, start=-0.594234528  )
 @variable(m, -2<= x23 <=2, start=-1.47403364  )
 @variable(m, -2<= x24 <=2, start=-1.399592848  )



@objective(m, :Min, ( (x1 )*(x1 ) + (x2 - 5.9 )*(x2 - 5.9 ) + (x3 - 0.9 )*(x3 - 0.9 ) + (x4 - 5.4 )*(x4 - 5.4 ) + (x5 - 1.8)*(x5 - 1.8) + (x6 - 4.4 )*(x6 - 4.4 ) + (x7 - 2.6 )*(x7 - 2.6 ) + (x8 - 4.6 )*(x8 - 4.6 ) + (x9 - 3.3 )*(x9 - 3.3 ) + (x10 - 3.5 )*(x10 - 3.5 ) + (x11 - 4.4 )*(x11 - 4.4 ) + (x12 - 3.7 )*(x12 - 3.7 ) + (x13 - 5.2 )*(x13 - 5.2 ) + (x14 - 2.8 )*(x14 - 2.8 ) + (x15 - 6.1 )*(x15 - 6.1 ) + (x16 - 2.8 )*(x16 - 2.8 ) + (x17 - 6.5 )*(x17 - 6.5 ) + (x18 - 2.4 )*(x18 - 2.4 ) + (x19 - 7.4 )*(x19 - 7.4 ) + (x20 - 1.5 )*(x20 - 1.5 )))

@NLconstraint(m,  x22*x1 + x23*x1^2 + x24*x1^3 - x2 + x21 == 0)

@NLconstraint(m,  x22*x3 + x23* x3^2 + x24*x3^3  - x4 + x21 == 0)

@NLconstraint(m,  x22*x5 + x23*x5^2 + x24*x5^3  - x6 + x21 == 0)

@NLconstraint(m,  x22*x7 + x23*x7^2 + x24*x7^3 - x8 + x21 == 0)

@NLconstraint(m,  x22*x9 + x23*x9^2 + x24*x9^3 - x10 + x21 == 0)

@NLconstraint(m,  x22*x11 + x23*x11^2 + x24*x11^3 - x12 + x21 == 0)

@NLconstraint(m,  x22*x13 + x23*x13^2 + x24*x13^3 - x14 + x21 == 0)

@NLconstraint(m,  x22*x15 + x23*x15^2 + x24*x15^3 - x16 + x21 == 0)

@NLconstraint(m,  x22*x17 + x23*x17^2 + x24*x17^3 - x18 + x21 == 0)

@NLconstraint(m,  x22*x19 + x23*x19^2 + x24*x19^3 - x20 + x21 == 0)


    return m
end


m = createModel()
m = copyNLModel(m)
m.solver = SCIPSolver("limits/gap", mingap, "limits/absgap", mingap, "limits/time", 43200.0)
solve(m)
println(m.colVal)


